name: Build MacOS Executable and Publish Release

on:
  push:
    branches:
      - main

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install pyinstaller
        run: |
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile main.py
          mv dist/main dist/Lesta_Cluster_Selector
          chmod +x dist/Lesta_Cluster_Selector

      - name: Create zip archive
        run: zip -j Lesta_Cluster_Selector.zip dist/Lesta_Cluster_Selector

      - name: Get latest commit message
        id: commit_message
        run: echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.sha }})"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.TOKEN_FOR_PUBLIC }}
          script: |
            const { data: latestRelease } = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let currentVersion = latestRelease ? latestRelease.tag_name : "v0.0.0";
            let versionComponents = currentVersion.replace('v', '').split('.').map(Number);
            versionComponents[2]++;
            const nextVersion = `v${versionComponents.join('.')}`;

            const releaseResponse = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: nextVersion,
              name: nextVersion,
              body: "Тело вашего релиза",
              draft: false,
              prerelease: false
            });

            console.log(`Created release ${nextVersion}`);
            console.log(releaseResponse.data);

            const uploadUrl = releaseResponse.data.upload_url;
            console.log(`Upload URL: ${uploadUrl}`);
            core.setOutput("upload_url", uploadUrl);

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_PUBLIC }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Lesta_Cluster_Selector.zip
          asset_name: Lesta_Cluster_Selector.zip
          asset_content_type: application/zip

  build-windows:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install pyinstaller
        run: |
          pip install pyinstaller

      - name: Build Windows executable
        run: |
          pyinstaller --onefile main.py
          mv dist/main.exe dist/Lesta_Cluster_Selector.exe

      - name: Create Windows zip archive
        run: zip -j Lesta_Cluster_Selector_Windows.zip dist/Lesta_Cluster_Selector.exe

      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_PUBLIC }}
        with:
          upload_url: ${{ needs.build.outputs.create_release.outputs.upload_url }}
          asset_path: Lesta_Cluster_Selector_Windows.zip
          asset_name: Lesta_Cluster_Selector_Windows.zip
          asset_content_type: application/zip
